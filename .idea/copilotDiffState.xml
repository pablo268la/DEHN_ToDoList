<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="originalContent" value="# ToDo List Application&#10;&#10;A command-line application for task management developed with Spring Boot and Spring Shell.&#10;&#10;## Description&#10;&#10;This application allows you to manage a ToDo List through an interactive command-line interface. Tasks are stored in JSON format and include information such as title, description, due date, and status.&#10;&#10;## Building and Running the Executable&#10;&#10;### 1. Compile the Project&#10;&#10;```bash&#10;# Navigate to the project directory&#10;cd /path/to/DEHN_ToDoList&#10;&#10;# Compile and package the application&#10;mvn clean package&#10;&#10;# Or to skip tests (faster)&#10;mvn clean package -DskipTests&#10;```&#10;&#10;This will generate the JAR file in `target/ToDoList-0.0.1-SNAPSHOT.jar`&#10;&#10;### 2. Run the JAR&#10;&#10;```bash&#10;# Run the application&#10;java -jar target/ToDoList-0.0.1-SNAPSHOT.jar&#10;```&#10;&#10;### 3. Create a Native Executable (Optional)&#10;&#10;If you want to create a native executable, you can use GraalVM:&#10;&#10;```bash&#10;# Make sure you have GraalVM installed&#10;mvn clean package -Pnative&#10;```&#10;&#10;## Available Commands&#10;&#10;Once the application is running, you'll see an interactive prompt where you can use the following commands:&#10;&#10;### 1. Create a Task&#10;&#10;```bash&#10;create --name &quot;Task title&quot; --description &quot;Detailed description&quot; --dueDate &quot;2025-12-31&quot;&#10;```&#10;&#10;**Example:**&#10;```bash&#10;create --name &quot;Study Spring Boot&quot; --description &quot;Complete Spring Boot and Spring Shell tutorial&quot; --dueDate &quot;2025-08-20&quot;&#10;```&#10;&#10;### 2. List Tasks&#10;&#10;```bash&#10;# List all tasks&#10;list&#10;&#10;# List tasks by status&#10;list --filter TODO&#10;list --filter IN_PROGRESS&#10;list --filter COMPLETED&#10;```&#10;&#10;**Example:**&#10;```bash&#10;list --filter TODO&#10;```&#10;&#10;### 3. Find a Task by ID&#10;&#10;```bash&#10;find --id &quot;task-id&quot;&#10;```&#10;&#10;**Example:**&#10;```bash&#10;find --id &quot;12345678-1234-1234-1234-123456789abc&quot;&#10;```&#10;&#10;### 4. Update a Task&#10;&#10;```bash&#10;update --id &quot;task-id&quot; --name &quot;New title&quot; --description &quot;New description&quot; --dueDate &quot;2025-09-01&quot; --status &quot;IN_PROGRESS&quot;&#10;```&#10;&#10;**Example:**&#10;```bash&#10;update --id &quot;12345678-1234-1234-1234-123456789abc&quot; --status &quot;COMPLETED&quot;&#10;```&#10;&#10;**Valid statuses:** `TODO`, `IN_PROGRESS`, `COMPLETED`&#10;&#10;### 5. Delete Tasks&#10;&#10;```bash&#10;# Delete a specific task&#10;delete --id &quot;task-id&quot;&#10;&#10;# Delete all tasks&#10;delete --all&#10;```&#10;&#10;**Example:**&#10;```bash&#10;delete --id &quot;12345678-1234-1234-1234-123456789abc&quot;&#10;delete --all&#10;```&#10;&#10;### 6. Configure Data File&#10;&#10;```bash&#10;# Change the file where tasks are saved&#10;set-filename --fileName &quot;my-file.json&quot;&#10;&#10;# Change file and delete previous tasks&#10;set-filename --fileName &quot;new-file.json&quot; --blank&#10;```&#10;&#10;**Example:**&#10;```bash&#10;set-filename --fileName &quot;work-tasks.json&quot;&#10;```&#10;&#10;### 7. Help&#10;&#10;```bash&#10;# View general help&#10;help&#10;&#10;# View help for a specific command&#10;help create&#10;help update&#10;```&#10;&#10;## Complete Workflow Example&#10;&#10;```bash&#10;# 1. Start the application&#10;java -jar target/ToDoList-0.0.1-SNAPSHOT.jar&#10;&#10;# 2. Create some tasks&#10;create --name &quot;Check emails&quot; --description &quot;Review and respond to pending emails&quot; --dueDate &quot;2025-08-12&quot;&#10;create --name &quot;Prepare presentation&quot; --description &quot;Prepare slides for Friday's meeting&quot; --dueDate &quot;2025-08-15&quot;&#10;&#10;# 3. List all tasks&#10;list&#10;&#10;# 4. Update a task's status&#10;update --id &quot;task-id&quot; --status &quot;IN_PROGRESS&quot;&#10;&#10;# 5. Find a specific task&#10;find --id &quot;task-id&quot;&#10;&#10;# 6. List only completed tasks&#10;list --filter COMPLETED&#10;&#10;# 7. Delete a task&#10;delete --id &quot;task-id&quot;&#10;&#10;# 8. Exit the application&#10;exit&#10;```&#10;&#10;## Data File&#10;&#10;By default, tasks are saved in the `tasks.json` file in the project's root directory. You can change this using the `set-filename` command.&#10;&#10;## Running Tests&#10;&#10;```bash&#10;# Run all tests&#10;mvn test&#10;&#10;# Run tests with detailed report&#10;mvn test -Dtest.verbose=true&#10;```&#10;&#10;## Troubleshooting&#10;&#10;### Error: &quot;Java version not supported&quot;&#10;- Make sure you have Java 21 installed&#10;- Check the `JAVA_HOME` environment variable&#10;&#10;### Error: &quot;Command not found&quot;&#10;- Verify that you're typing the command correctly&#10;- Use `help` to see all available commands&#10;&#10;### Error saving tasks&#10;- Check that you have write permissions in the directory&#10;- Make sure the file isn't being used by another application&#10;&#10;## Contributing&#10;&#10;1. Fork the project&#10;2. Create a feature branch (`git checkout -b feature/new-functionality`)&#10;3. Commit your changes (`git commit -am 'Add new functionality'`)&#10;4. Push to the branch (`git push origin feature/new-functionality`)&#10;5. Create a Pull Request&#10;&#10;## License&#10;&#10;This project is a demo developed for educational purposes." />
              <option name="updatedContent" value="# ToDo List Application&#10;&#10;A command-line application for task management developed with Spring Boot and Spring Shell.&#10;&#10;## Description&#10;&#10;This application allows you to manage a ToDo List through an interactive command-line interface. Tasks are stored in JSON format and include information such as title, description, due date, and status.&#10;&#10;## System Requirements&#10;&#10;- Java 21 or higher&#10;- Maven 3.6 or higher&#10;- IntelliJ IDEA (recommended) or any Java-compatible IDE&#10;- **GraalVM 21** (required for native compilation only)&#10;&#10;## Technologies Used&#10;&#10;- **Java 21**&#10;- **Spring Boot 3.5.4**&#10;- **Spring Shell 3.4.1**&#10;- **Jackson** (for JSON serialization)&#10;- **Lombok** (to reduce boilerplate code)&#10;- **Maven** (dependency management)&#10;&#10;## Building and Running the Executable&#10;&#10;### 1. Compile the Project&#10;&#10;```bash&#10;# Navigate to the project directory&#10;cd /path/to/DEHN_ToDoList&#10;&#10;# Compile and package the application&#10;mvn clean package&#10;&#10;# Or to skip tests (faster)&#10;mvn clean package -DskipTests&#10;```&#10;&#10;This will generate the JAR file in `target/ToDoList-0.0.1-SNAPSHOT.jar`&#10;&#10;### 2. Run the JAR&#10;&#10;```bash&#10;# Run the application&#10;java -jar target/ToDoList-0.0.1-SNAPSHOT.jar&#10;```&#10;&#10;### 3. Create a Native Executable (Optional)&#10;&#10;If you want to create a native executable, you can use GraalVM:&#10;&#10;```bash&#10;# Make sure you have GraalVM installed and configured&#10;# Compile to native executable&#10;./mvnw -Pnative native:compile&#10;&#10;# Run the native executable&#10;./target/ToDoList&#10;```&#10;&#10;**Note:** Native compilation requires GraalVM to be installed and properly configured on your system.&#10;&#10;## Available Commands&#10;&#10;Once the application is running, you'll see an interactive prompt where you can use the following commands:&#10;&#10;### 1. Create a Task&#10;&#10;```bash&#10;create --name &quot;Task title&quot; --description &quot;Detailed description&quot; --dueDate &quot;2025-12-31&quot;&#10;```&#10;&#10;**Example:**&#10;```bash&#10;create --name &quot;Study Spring Boot&quot; --description &quot;Complete Spring Boot and Spring Shell tutorial&quot; --dueDate &quot;2025-08-20&quot;&#10;```&#10;&#10;### 2. List Tasks&#10;&#10;```bash&#10;# List all tasks&#10;list&#10;&#10;# List tasks by status&#10;list --filter TODO&#10;list --filter IN_PROGRESS&#10;list --filter COMPLETED&#10;```&#10;&#10;**Example:**&#10;```bash&#10;list --filter TODO&#10;```&#10;&#10;### 3. Find a Task by ID&#10;&#10;```bash&#10;find --id &quot;task-id&quot;&#10;```&#10;&#10;**Example:**&#10;```bash&#10;find --id &quot;12345678-1234-1234-1234-123456789abc&quot;&#10;```&#10;&#10;### 4. Update a Task&#10;&#10;```bash&#10;update --id &quot;task-id&quot; --name &quot;New title&quot; --description &quot;New description&quot; --dueDate &quot;2025-09-01&quot; --status &quot;IN_PROGRESS&quot;&#10;```&#10;&#10;**Example:**&#10;```bash&#10;update --id &quot;12345678-1234-1234-1234-123456789abc&quot; --status &quot;COMPLETED&quot;&#10;```&#10;&#10;**Valid statuses:** `TODO`, `IN_PROGRESS`, `COMPLETED`&#10;&#10;### 5. Delete Tasks&#10;&#10;```bash&#10;# Delete a specific task&#10;delete --id &quot;task-id&quot;&#10;&#10;# Delete all tasks&#10;delete --all&#10;```&#10;&#10;**Example:**&#10;```bash&#10;delete --id &quot;12345678-1234-1234-1234-123456789abc&quot;&#10;delete --all&#10;```&#10;&#10;### 6. Configure Data File&#10;&#10;```bash&#10;# Change the file where tasks are saved&#10;set-filename --fileName &quot;my-file.json&quot;&#10;&#10;# Change file and delete previous tasks&#10;set-filename --fileName &quot;new-file.json&quot; --blank&#10;```&#10;&#10;**Example:**&#10;```bash&#10;set-filename --fileName &quot;work-tasks.json&quot;&#10;```&#10;&#10;### 7. Help&#10;&#10;```bash&#10;# View general help&#10;help&#10;&#10;# View help for a specific command&#10;help create&#10;help update&#10;```&#10;&#10;## Complete Workflow Example&#10;&#10;```bash&#10;# 1. Start the application&#10;java -jar target/ToDoList-0.0.1-SNAPSHOT.jar&#10;&#10;# 2. Create some tasks&#10;create --name &quot;Check emails&quot; --description &quot;Review and respond to pending emails&quot; --dueDate &quot;2025-08-12&quot;&#10;create --name &quot;Prepare presentation&quot; --description &quot;Prepare slides for Friday's meeting&quot; --dueDate &quot;2025-08-15&quot;&#10;&#10;# 3. List all tasks&#10;list&#10;&#10;# 4. Update a task's status&#10;update --id &quot;task-id&quot; --status &quot;IN_PROGRESS&quot;&#10;&#10;# 5. Find a specific task&#10;find --id &quot;task-id&quot;&#10;&#10;# 6. List only completed tasks&#10;list --filter COMPLETED&#10;&#10;# 7. Delete a task&#10;delete --id &quot;task-id&quot;&#10;&#10;# 8. Exit the application&#10;exit&#10;```&#10;&#10;## Data File&#10;&#10;By default, tasks are saved in the `tasks.json` file in the project's root directory. You can change this using the `set-filename` command.&#10;&#10;## Running Tests&#10;&#10;```bash&#10;# Run all tests&#10;mvn test&#10;&#10;# Run tests with detailed report&#10;mvn test -Dtest.verbose=true&#10;```&#10;&#10;## Troubleshooting&#10;&#10;### Error: &quot;Java version not supported&quot;&#10;- Make sure you have Java 21 installed&#10;- Check the `JAVA_HOME` environment variable&#10;&#10;### Error: &quot;Command not found&quot;&#10;- Verify that you're typing the command correctly&#10;- Use `help` to see all available commands&#10;&#10;### Error saving tasks&#10;- Check that you have write permissions in the directory&#10;- Make sure the file isn't being used by another application&#10;&#10;## Contributing&#10;&#10;1. Fork the project&#10;2. Create a feature branch (`git checkout -b feature/new-functionality`)&#10;3. Commit your changes (`git commit -am 'Add new functionality'`)&#10;4. Push to the branch (`git push origin feature/new-functionality`)&#10;5. Create a Pull Request&#10;&#10;## License&#10;&#10;This project is a demo developed for educational purposes." />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/ToDoList/commands/BaseCommand.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/ToDoList/commands/BaseCommand.java" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/ToDoList/commands/HelloCommand.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/ToDoList/commands/HelloCommand.java" />
              <option name="originalContent" value="package com.example.ToDoList.commands;&#10;&#10;import org.springframework.shell.standard.ShellComponent;&#10;import org.springframework.shell.standard.ShellMethod;&#10;import org.springframework.shell.standard.ShellOption;&#10;&#10;@ShellComponent&#10;public class HelloCommand {&#10;&#10;    @ShellMethod(key = &quot;hello&quot;, value = &quot;Prints a hello message&quot;)&#10;    public String hello(@ShellOption(defaultValue = &quot;World&quot;) String name) {&#10;        return String.format(&quot;Hello, %s!&quot;, name);&#10;    }&#10;&#10;    @ShellMethod(key = &quot;goodbye&quot;, value = &quot;Prints a goodbye message&quot;)&#10;    public String goodbye() {&#10;        return &quot;Goodbye, World!&quot;;&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.ToDoList.commands;&#10;&#10;import com.example.ToDoList.model.ToDoItem;&#10;import com.example.ToDoList.model.TaskStatus;&#10;import com.example.ToDoList.service.ToDoService;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.shell.standard.ShellComponent;&#10;import org.springframework.shell.standard.ShellMethod;&#10;import org.springframework.shell.standard.ShellOption;&#10;&#10;import java.time.LocalDate;&#10;import java.time.format.DateTimeFormatter;&#10;import java.time.format.DateTimeParseException;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;@ShellComponent&#10;public class ToDoCommand {&#10;&#10;    @Autowired&#10;    private ToDoService toDoService;&#10;&#10;    @ShellMethod(key = &quot;listar&quot;, value = &quot;Lista todas las tareas&quot;)&#10;    public String listarTareas(@ShellOption(defaultValue = &quot;TODAS&quot;) String filtro) {&#10;        List&lt;ToDoItem&gt; tareas;&#10;        &#10;        if (&quot;TODAS&quot;.equalsIgnoreCase(filtro)) {&#10;            tareas = toDoService.getAllTodos();&#10;        } else {&#10;            try {&#10;                TaskStatus status = TaskStatus.valueOf(filtro.toUpperCase().replace(&quot; &quot;, &quot;_&quot;));&#10;                tareas = toDoService.getTodosByStatus(status);&#10;            } catch (IllegalArgumentException e) {&#10;                return &quot;Estado inválido. Usa: POR_HACER, EN_CURSO, COMPLETADO o TODAS&quot;;&#10;            }&#10;        }&#10;&#10;        if (tareas.isEmpty()) {&#10;            return &quot;No hay tareas en la lista.&quot;;&#10;        }&#10;&#10;        StringBuilder sb = new StringBuilder();&#10;        sb.append(&quot;\n=== LISTA DE TAREAS ===\n&quot;);&#10;        for (int i = 0; i &lt; tareas.size(); i++) {&#10;            sb.append(String.format(&quot;%d. %s\n&quot;, i + 1, tareas.get(i).toString()));&#10;        }&#10;        return sb.toString();&#10;    }&#10;&#10;    @ShellMethod(key = &quot;crear&quot;, value = &quot;Crea una nueva tarea&quot;)&#10;    public String crearTarea(&#10;            @ShellOption String nombre,&#10;            @ShellOption String descripcion,&#10;            @ShellOption String fechaLimite) {&#10;        &#10;        try {&#10;            LocalDate fecha = LocalDate.parse(fechaLimite, DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd&quot;));&#10;            ToDoItem nuevaTarea = toDoService.createTodo(nombre, descripcion, fecha);&#10;            return String.format(&quot;✅ Tarea creada exitosamente:\n%s&quot;, nuevaTarea.toString());&#10;        } catch (DateTimeParseException e) {&#10;            return &quot;❌ Formato de fecha inválido. Usa: yyyy-MM-dd (ejemplo: 2025-12-31)&quot;;&#10;        }&#10;    }&#10;&#10;    @ShellMethod(key = &quot;cambiar-estado&quot;, value = &quot;Cambia el estado de una tarea&quot;)&#10;    public String cambiarEstado(&#10;            @ShellOption String id,&#10;            @ShellOption String nuevoEstado) {&#10;        &#10;        try {&#10;            TaskStatus status = TaskStatus.valueOf(nuevoEstado.toUpperCase().replace(&quot; &quot;, &quot;_&quot;));&#10;            boolean actualizado = toDoService.updateTodoStatus(id, status);&#10;            &#10;            if (actualizado) {&#10;                Optional&lt;ToDoItem&gt; tarea = toDoService.getTodoById(id);&#10;                return String.format(&quot;✅ Estado actualizado:\n%s&quot;, tarea.get().toString());&#10;            } else {&#10;                return &quot;❌ No se encontró una tarea con ese ID.&quot;;&#10;            }&#10;        } catch (IllegalArgumentException e) {&#10;            return &quot;❌ Estado inválido. Usa: POR_HACER, EN_CURSO o COMPLETADO&quot;;&#10;        }&#10;    }&#10;&#10;    @ShellMethod(key = &quot;borrar&quot;, value = &quot;Borra una tarea por ID&quot;)&#10;    public String borrarTarea(@ShellOption String id) {&#10;        boolean borrado = toDoService.deleteTodo(id);&#10;        &#10;        if (borrado) {&#10;            return &quot;✅ Tarea borrada exitosamente.&quot;;&#10;        } else {&#10;            return &quot;❌ No se encontró una tarea con ese ID.&quot;;&#10;        }&#10;    }&#10;&#10;    @ShellMethod(key = &quot;buscar&quot;, value = &quot;Busca una tarea por ID&quot;)&#10;    public String buscarTarea(@ShellOption String id) {&#10;        Optional&lt;ToDoItem&gt; tarea = toDoService.getTodoById(id);&#10;        &#10;        if (tarea.isPresent()) {&#10;            return String.format(&quot; Tarea encontrada:\n%s&quot;, tarea.get().toString());&#10;        } else {&#10;            return &quot;❌ No se encontró una tarea con ese ID.&quot;;&#10;        }&#10;    }&#10;&#10;    @ShellMethod(key = &quot;ayuda-todo&quot;, value = &quot;Muestra ayuda sobre los comandos disponibles&quot;)&#10;    public String ayuda() {&#10;        return &quot;&quot;&quot;&#10;                &#10;                === COMANDOS DISPONIBLES ===&#10;                &#10;                 crear --nombre &quot;Tarea&quot; --descripcion &quot;Descripción&quot; --fecha-limite 2025-12-31&#10;                   Crea una nueva tarea&#10;                &#10;                 listar [--filtro TODAS|POR_HACER|EN_CURSO|COMPLETADO]&#10;                   Lista las tareas (por defecto muestra todas)&#10;                &#10;                 cambiar-estado --id &lt;id&gt; --nuevo-estado POR_HACER|EN_CURSO|COMPLETADO&#10;                   Cambia el estado de una tarea&#10;                &#10;                 buscar --id &lt;id&gt;&#10;                   Busca una tarea específica por ID&#10;                &#10;                ️ borrar --id &lt;id&gt;&#10;                   Borra una tarea permanentemente&#10;                &#10;                 Tip: Puedes usar solo los primeros caracteres del ID para identificar una tarea&#10;                &quot;&quot;&quot;;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/ToDoList/commands/HelpCommand.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/ToDoList/commands/HelpCommand.java" />
              <option name="updatedContent" value="package com.example.ToDoList.commands;&#10;&#10;import org.springframework.shell.standard.ShellComponent;&#10;import org.springframework.shell.standard.ShellMethod;&#10;&#10;@ShellComponent&#10;public class HelpCommand {&#10;&#10;    @ShellMethod(key = &quot;help-todo&quot;, value = &quot;Show available commands help&quot;)&#10;    public String help() {&#10;        return &quot;&quot;&quot;&#10;&#10;                === AVAILABLE COMMANDS ===&#10;&#10;                 create --name &quot;Task&quot; --description &quot;Description&quot; --due-date 2025-12-31&#10;                   Create a new task&#10;&#10;                 list [--filter ALL|TODO|IN_PROGRESS|COMPLETED]&#10;                   List tasks (default shows all)&#10;&#10;                 update-status --id &lt;id&gt; --new-status TODO|IN_PROGRESS|COMPLETED&#10;                   Update task status&#10;&#10;                 find --id &lt;id&gt;&#10;                   Find a specific task by ID&#10;&#10;                ️ delete --id &lt;id&gt;&#10;                   Delete a task permanently&#10;&#10;                ✏️ update --id &lt;id&gt; [--name &quot;New Task&quot; --description &quot;New Description&quot; --due-date 2025-12-31]&#10;                   Update task title, description, or due date&#10;&#10;                 Tip: Use task ID numbers to reference tasks (e.g., 1, 2, 3)&#10;                &quot;&quot;&quot;;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/ToDoList/commands/ToDoCommand.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/ToDoList/commands/ToDoCommand.java" />
              <option name="originalContent" value="package com.example.ToDoList.commands;&#10;&#10;import com.example.ToDoList.model.ToDoItem;&#10;import com.example.ToDoList.model.TaskStatus;&#10;import com.example.ToDoList.service.ToDoService;&#10;import lombok.RequiredArgsConstructor;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.springframework.shell.standard.ShellComponent;&#10;import org.springframework.shell.standard.ShellMethod;&#10;import org.springframework.shell.standard.ShellOption;&#10;&#10;import java.time.LocalDate;&#10;import java.time.format.DateTimeFormatter;&#10;import java.time.format.DateTimeParseException;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;@Slf4j&#10;@ShellComponent&#10;@RequiredArgsConstructor&#10;public class ToDoCommand {&#10;&#10;    private final ToDoService toDoService;&#10;&#10;    // ANSI Color codes&#10;    private static final String RESET = &quot;\u001B[0m&quot;;&#10;    private static final String RED = &quot;\u001B[31m&quot;;&#10;    private static final String GREEN = &quot;\u001B[32m&quot;;&#10;    private static final String YELLOW = &quot;\u001B[33m&quot;;&#10;    private static final String BLUE = &quot;\u001B[34m&quot;;&#10;    private static final String CYAN = &quot;\u001B[36m&quot;;&#10;&#10;    private String getColoredStatus(TaskStatus status) {&#10;        return switch (status) {&#10;            case TODO -&gt; RED + status.toString() + RESET;&#10;            case IN_PROGRESS -&gt; YELLOW + status.toString() + RESET;&#10;            case COMPLETED -&gt; GREEN + status.toString() + RESET;&#10;        };&#10;    }&#10;&#10;    @ShellMethod(key = &quot;list&quot;, value = &quot;List all tasks&quot;)&#10;    public String listTasks(@ShellOption(defaultValue = &quot;ALL&quot;) String filter) {&#10;        List&lt;ToDoItem&gt; tasks;&#10;&#10;        if (&quot;ALL&quot;.equalsIgnoreCase(filter)) {&#10;            tasks = toDoService.getAllTodos();&#10;        } else {&#10;            try {&#10;                TaskStatus status = TaskStatus.valueOf(filter.toUpperCase().replace(&quot; &quot;, &quot;_&quot;));&#10;                tasks = toDoService.getTodosByStatus(status);&#10;            } catch (IllegalArgumentException e) {&#10;                return &quot;Invalid status. Use: TODO, IN_PROGRESS, COMPLETED or ALL&quot;;&#10;            }&#10;        }&#10;&#10;        if (tasks.isEmpty()) {&#10;            return &quot;No tasks in the list.&quot;;&#10;        }&#10;&#10;        // Tabular format with colors&#10;        StringBuilder sb = new StringBuilder();&#10;        sb.append(&quot;\n&quot;).append(CYAN).append(&quot;=== TASK LIST ===&quot;).append(RESET).append(&quot;\n&quot;);&#10;        sb.append(String.format(&quot;%-4s %-50s %-80s %-12s %-25s%n&quot;,&#10;            BLUE + &quot;ID&quot; + RESET,&#10;            BLUE + &quot;TITLE&quot; + RESET,&#10;            BLUE + &quot;DESCRIPTION&quot; + RESET,&#10;            BLUE + &quot;DUE DATE&quot; + RESET,&#10;            BLUE + &quot;STATUS&quot; + RESET));&#10;        sb.append(&quot;─&quot;.repeat(160)).append(&quot;\n&quot;);&#10;&#10;        for (ToDoItem task : tasks) {&#10;            String title = task.getName().length() &gt; 50 ? task.getName().substring(0, 47) + &quot;...&quot; : task.getName();&#10;            String description = task.getDescription().length() &gt; 80 ? task.getDescription().substring(0, 77) + &quot;...&quot; : task.getDescription();&#10;&#10;            sb.append(String.format(&quot;%-4d %-50s %-80s %-12s %-35s%n&quot;,&#10;                    task.getId(),&#10;                    title,&#10;                    description,&#10;                    task.getDueDate().toString(),&#10;                    getColoredStatus(task.getStatus())));&#10;        }&#10;&#10;&#10;&#10;        return sb.toString();&#10;    }&#10;&#10;    @ShellMethod(key = &quot;create&quot;, value = &quot;Create a new task&quot;)&#10;    public String createTask(&#10;            @ShellOption String name,&#10;            @ShellOption String description,&#10;            @ShellOption String dueDate) {&#10;&#10;        try {&#10;            LocalDate date = LocalDate.parse(dueDate, DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd&quot;));&#10;            ToDoItem newTask = toDoService.createTodo(name, description, date);&#10;            return String.format(&quot;✅ Task created successfully:\n%s&quot;, newTask.toString());&#10;        } catch (DateTimeParseException e) {&#10;            log.warn(&quot;Invalid date format provided: {}&quot;, dueDate);&#10;            return &quot;❌ Invalid date format. Use: yyyy-MM-dd (example: 2025-12-31)&quot;;&#10;        }&#10;    }&#10;&#10;    @ShellMethod(key = &quot;update-status&quot;, value = &quot;Update task status&quot;)&#10;    public String updateStatus(&#10;            @ShellOption String id,&#10;            @ShellOption String newStatus) {&#10;&#10;        try {&#10;            TaskStatus status = TaskStatus.valueOf(newStatus.toUpperCase().replace(&quot; &quot;, &quot;_&quot;));&#10;            boolean updated = toDoService.updateTodoStatus(id, status);&#10;&#10;            if (updated) {&#10;                Optional&lt;ToDoItem&gt; task = toDoService.getTodoById(id);&#10;                return String.format(&quot;✅ Status updated:\n%s&quot;, task.get().toString());&#10;            } else {&#10;                return &quot;❌ No task found with that ID.&quot;;&#10;            }&#10;        } catch (IllegalArgumentException e) {&#10;            log.warn(&quot;Invalid status provided: {}&quot;, newStatus);&#10;            return &quot;❌ Invalid status. Use: TODO, IN_PROGRESS or COMPLETED&quot;;&#10;        }&#10;    }&#10;&#10;    @ShellMethod(key = &quot;delete&quot;, value = &quot;Delete a task by ID&quot;)&#10;    public String deleteTask(@ShellOption String id) {&#10;        boolean deleted = toDoService.deleteTodo(id);&#10;&#10;        if (deleted) {&#10;            return &quot;✅ Task deleted successfully.&quot;;&#10;        } else {&#10;            return &quot;❌ No task found with that ID.&quot;;&#10;        }&#10;    }&#10;&#10;    @ShellMethod(key = &quot;find&quot;, value = &quot;Find a task by ID&quot;)&#10;    public String findTask(@ShellOption String id) {&#10;        Optional&lt;ToDoItem&gt; task = toDoService.getTodoById(id);&#10;&#10;        if (task.isPresent()) {&#10;            return String.format(&quot; Task found:\n%s&quot;, task.get().toString());&#10;        } else {&#10;            return &quot;❌ No task found with that ID.&quot;;&#10;        }&#10;    }&#10;&#10;    @ShellMethod(key = &quot;update&quot;, value = &quot;Update task title, description or due date&quot;)&#10;    public String updateTask(&#10;            @ShellOption String id,&#10;            @ShellOption(defaultValue = &quot;&quot;) String name,&#10;            @ShellOption(defaultValue = &quot;&quot;) String description,&#10;            @ShellOption(defaultValue = &quot;&quot;) String dueDate) {&#10;&#10;        Optional&lt;ToDoItem&gt; taskOpt = toDoService.getTodoById(id);&#10;        if (taskOpt.isEmpty()) {&#10;            return &quot;❌ No task found with that ID.&quot;;&#10;        }&#10;&#10;        ToDoItem task = taskOpt.get();&#10;        boolean updated = false;&#10;&#10;        // Update name if provided&#10;        if (!name.isEmpty()) {&#10;            task.setName(name);&#10;            updated = true;&#10;        }&#10;&#10;        // Update description if provided&#10;        if (!description.isEmpty()) {&#10;            task.setDescription(description);&#10;            updated = true;&#10;        }&#10;&#10;        // Update due date if provided&#10;        if (!dueDate.isEmpty()) {&#10;            try {&#10;                LocalDate newDate = LocalDate.parse(dueDate, DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd&quot;));&#10;                task.setDueDate(newDate);&#10;                updated = true;&#10;            } catch (DateTimeParseException e) {&#10;                log.warn(&quot;Invalid date format provided: {}&quot;, dueDate);&#10;                return &quot;❌ Invalid date format. Use: yyyy-MM-dd (example: 2025-12-31)&quot;;&#10;            }&#10;        }&#10;&#10;        if (!updated) {&#10;            return &quot;❌ No fields to update. Provide at least one: --name, --description, or --due-date&quot;;&#10;        }&#10;&#10;        boolean saved = toDoService.saveTask(task);&#10;        if (saved) {&#10;            return String.format(&quot;✅ Task updated successfully:\n%s&quot;, task.toString());&#10;        } else {&#10;            return &quot;❌ Error saving task updates.&quot;;&#10;        }&#10;    }&#10;&#10;    @ShellMethod(key = &quot;help-todo&quot;, value = &quot;Show available commands help&quot;)&#10;    public String help() {&#10;        return &quot;&quot;&quot;&#10;&#10;                === AVAILABLE COMMANDS ===&#10;&#10;                 create --name &quot;Task&quot; --description &quot;Description&quot; --due-date 2025-12-31&#10;                   Create a new task&#10;&#10;                 list [--filter ALL|TODO|IN_PROGRESS|COMPLETED]&#10;                   List tasks (default shows all)&#10;&#10;                 update-status --id &lt;id&gt; --new-status TODO|IN_PROGRESS|COMPLETED&#10;                   Update task status&#10;&#10;                 find --id &lt;id&gt;&#10;                   Find a specific task by ID&#10;&#10;                ️ delete --id &lt;id&gt;&#10;                   Delete a task permanently&#10;&#10;                ✏️ update --id &lt;id&gt; [--name &quot;New Task&quot; --description &quot;New Description&quot; --due-date 2025-12-31]&#10;                   Update task title, description, or due date&#10;&#10;                 Tip: Use task ID numbers to reference tasks (e.g., 1, 2, 3)&#10;                &quot;&quot;&quot;;&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.ToDoList.commands;&#10;&#10;import com.example.ToDoList.model.ToDoItem;&#10;import com.example.ToDoList.model.TaskStatus;&#10;import com.example.ToDoList.service.ToDoService;&#10;import lombok.RequiredArgsConstructor;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.springframework.shell.standard.ShellComponent;&#10;import org.springframework.shell.standard.ShellMethod;&#10;import org.springframework.shell.standard.ShellOption;&#10;&#10;import java.time.LocalDate;&#10;import java.time.format.DateTimeFormatter;&#10;import java.time.format.DateTimeParseException;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;@Slf4j&#10;@ShellComponent&#10;@RequiredArgsConstructor&#10;public class ToDoCommand {&#10;&#10;    private final ToDoService toDoService;&#10;&#10;    // ANSI Color codes&#10;    private static final String RESET = &quot;\u001B[0m&quot;;&#10;    private static final String RED = &quot;\u001B[31m&quot;;&#10;    private static final String GREEN = &quot;\u001B[32m&quot;;&#10;    private static final String YELLOW = &quot;\u001B[33m&quot;;&#10;    private static final String BLUE = &quot;\u001B[34m&quot;;&#10;    private static final String CYAN = &quot;\u001B[36m&quot;;&#10;&#10;    private String getColoredStatus(TaskStatus status) {&#10;        return switch (status) {&#10;            case TODO -&gt; RED + status.toString() + RESET;&#10;            case IN_PROGRESS -&gt; YELLOW + status.toString() + RESET;&#10;            case COMPLETED -&gt; GREEN + status.toString() + RESET;&#10;        };&#10;    }&#10;&#10;    @ShellMethod(key = &quot;list&quot;, value = &quot;List all tasks&quot;)&#10;    public String listTasks(@ShellOption(defaultValue = &quot;ALL&quot;) String filter) {&#10;        List&lt;ToDoItem&gt; tasks;&#10;&#10;        if (&quot;ALL&quot;.equalsIgnoreCase(filter)) {&#10;            tasks = toDoService.getAllTodos();&#10;        } else {&#10;            try {&#10;                TaskStatus status = TaskStatus.valueOf(filter.toUpperCase().replace(&quot; &quot;, &quot;_&quot;));&#10;                tasks = toDoService.getTodosByStatus(status);&#10;            } catch (IllegalArgumentException e) {&#10;                return &quot;Invalid status. Use: TODO, IN_PROGRESS, COMPLETED or ALL&quot;;&#10;            }&#10;        }&#10;&#10;        if (tasks.isEmpty()) {&#10;            return &quot;No tasks in the list.&quot;;&#10;        }&#10;&#10;        // Tabular format with colors&#10;        StringBuilder sb = new StringBuilder();&#10;        sb.append(&quot;\n&quot;).append(CYAN).append(&quot;=== TASK LIST ===&quot;).append(RESET).append(&quot;\n&quot;);&#10;        sb.append(String.format(&quot;%-4s %-75s %-85s %-12s %-15s%n&quot;,&#10;            BLUE + &quot;ID&quot; + RESET,&#10;            BLUE + &quot;TITLE&quot; + RESET,&#10;            BLUE + &quot;DESCRIPTION&quot; + RESET,&#10;            BLUE + &quot;DUE DATE&quot; + RESET,&#10;            BLUE + &quot;STATUS&quot; + RESET));&#10;        sb.append(&quot;─&quot;.repeat(195)).append(&quot;\n&quot;);&#10;&#10;        for (ToDoItem task : tasks) {&#10;            String title = task.getName().length() &gt; 74 ? task.getName().substring(0, 71) + &quot;...&quot; : task.getName();&#10;            String description = task.getDescription().length() &gt; 84 ? task.getDescription().substring(0, 81) + &quot;...&quot; : task.getDescription();&#10;&#10;            sb.append(String.format(&quot;%-4d %-75s %-85s %-12s %s%n&quot;,&#10;                    task.getId(),&#10;                    title,&#10;                    description,&#10;                    task.getDueDate().toString(),&#10;                    getColoredStatus(task.getStatus())));&#10;        }&#10;&#10;        // Legend&#10;        sb.append(&quot;\n&quot;).append(CYAN).append(&quot;Legend: &quot;).append(RESET);&#10;        sb.append(RED).append(&quot;TODO&quot;).append(RESET).append(&quot; | &quot;);&#10;        sb.append(YELLOW).append(&quot;IN_PROGRESS&quot;).append(RESET).append(&quot; | &quot;);&#10;        sb.append(GREEN).append(&quot;COMPLETED&quot;).append(RESET).append(&quot;\n&quot;);&#10;&#10;        return sb.toString();&#10;    }&#10;&#10;    @ShellMethod(key = &quot;create&quot;, value = &quot;Create a new task&quot;)&#10;    public String createTask(&#10;            @ShellOption String name,&#10;            @ShellOption String description,&#10;            @ShellOption String dueDate) {&#10;&#10;        try {&#10;            LocalDate date = LocalDate.parse(dueDate, DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd&quot;));&#10;            ToDoItem newTask = toDoService.createTodo(name, description, date);&#10;            return String.format(&quot;✅ Task created successfully:\n%s&quot;, newTask.toString());&#10;        } catch (DateTimeParseException e) {&#10;            log.warn(&quot;Invalid date format provided: {}&quot;, dueDate);&#10;            return &quot;❌ Invalid date format. Use: yyyy-MM-dd (example: 2025-12-31)&quot;;&#10;        }&#10;    }&#10;&#10;    @ShellMethod(key = &quot;update-status&quot;, value = &quot;Update task status&quot;)&#10;    public String updateStatus(&#10;            @ShellOption String id,&#10;            @ShellOption String newStatus) {&#10;&#10;        try {&#10;            TaskStatus status = TaskStatus.valueOf(newStatus.toUpperCase().replace(&quot; &quot;, &quot;_&quot;));&#10;            boolean updated = toDoService.updateTodoStatus(id, status);&#10;&#10;            if (updated) {&#10;                Optional&lt;ToDoItem&gt; task = toDoService.getTodoById(id);&#10;                return String.format(&quot;✅ Status updated:\n%s&quot;, task.get().toString());&#10;            } else {&#10;                return &quot;❌ No task found with that ID.&quot;;&#10;            }&#10;        } catch (IllegalArgumentException e) {&#10;            log.warn(&quot;Invalid status provided: {}&quot;, newStatus);&#10;            return &quot;❌ Invalid status. Use: TODO, IN_PROGRESS or COMPLETED&quot;;&#10;        }&#10;    }&#10;&#10;    @ShellMethod(key = &quot;delete&quot;, value = &quot;Delete a task by ID&quot;)&#10;    public String deleteTask(@ShellOption String id) {&#10;        boolean deleted = toDoService.deleteTodo(id);&#10;&#10;        if (deleted) {&#10;            return &quot;✅ Task deleted successfully.&quot;;&#10;        } else {&#10;            return &quot;❌ No task found with that ID.&quot;;&#10;        }&#10;    }&#10;&#10;    @ShellMethod(key = &quot;find&quot;, value = &quot;Find a task by ID&quot;)&#10;    public String findTask(@ShellOption String id) {&#10;        Optional&lt;ToDoItem&gt; task = toDoService.getTodoById(id);&#10;&#10;        if (task.isPresent()) {&#10;            return String.format(&quot; Task found:\n%s&quot;, task.get().toString());&#10;        } else {&#10;            return &quot;❌ No task found with that ID.&quot;;&#10;        }&#10;    }&#10;&#10;    @ShellMethod(key = &quot;update&quot;, value = &quot;Update task title, description or due date&quot;)&#10;    public String updateTask(&#10;            @ShellOption String id,&#10;            @ShellOption(defaultValue = &quot;&quot;) String name,&#10;            @ShellOption(defaultValue = &quot;&quot;) String description,&#10;            @ShellOption(defaultValue = &quot;&quot;) String dueDate) {&#10;&#10;        Optional&lt;ToDoItem&gt; taskOpt = toDoService.getTodoById(id);&#10;        if (taskOpt.isEmpty()) {&#10;            return &quot;❌ No task found with that ID.&quot;;&#10;        }&#10;&#10;        ToDoItem task = taskOpt.get();&#10;        boolean updated = false;&#10;&#10;        // Update name if provided&#10;        if (!name.isEmpty()) {&#10;            task.setName(name);&#10;            updated = true;&#10;        }&#10;&#10;        // Update description if provided&#10;        if (!description.isEmpty()) {&#10;            task.setDescription(description);&#10;            updated = true;&#10;        }&#10;&#10;        // Update due date if provided&#10;        if (!dueDate.isEmpty()) {&#10;            try {&#10;                LocalDate newDate = LocalDate.parse(dueDate, DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd&quot;));&#10;                task.setDueDate(newDate);&#10;                updated = true;&#10;            } catch (DateTimeParseException e) {&#10;                log.warn(&quot;Invalid date format provided: {}&quot;, dueDate);&#10;                return &quot;❌ Invalid date format. Use: yyyy-MM-dd (example: 2025-12-31)&quot;;&#10;            }&#10;        }&#10;&#10;        if (!updated) {&#10;            return &quot;❌ No fields to update. Provide at least one: --name, --description, or --due-date&quot;;&#10;        }&#10;&#10;        boolean saved = toDoService.saveTask(task);&#10;        if (saved) {&#10;            return String.format(&quot;✅ Task updated successfully:\n%s&quot;, task.toString());&#10;        } else {&#10;            return &quot;❌ Error saving task updates.&quot;;&#10;        }&#10;    }&#10;&#10;    @ShellMethod(key = &quot;help-todo&quot;, value = &quot;Show available commands help&quot;)&#10;    public String help() {&#10;        return &quot;&quot;&quot;&#10;&#10;                === AVAILABLE COMMANDS ===&#10;&#10;                 create --name &quot;Task&quot; --description &quot;Description&quot; --due-date 2025-12-31&#10;                   Create a new task&#10;&#10;                 list [--filter ALL|TODO|IN_PROGRESS|COMPLETED]&#10;                   List tasks (default shows all)&#10;&#10;                 update-status --id &lt;id&gt; --new-status TODO|IN_PROGRESS|COMPLETED&#10;                   Update task status&#10;&#10;                 find --id &lt;id&gt;&#10;                   Find a specific task by ID&#10;&#10;                ️ delete --id &lt;id&gt;&#10;                   Delete a task permanently&#10;&#10;                ✏️ update --id &lt;id&gt; [--name &quot;New Task&quot; --description &quot;New Description&quot; --due-date 2025-12-31]&#10;                   Update task title, description, or due date&#10;&#10;                 Tip: Use task ID numbers to reference tasks (e.g., 1, 2, 3)&#10;                &quot;&quot;&quot;;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/ToDoList/commands/UpdateStatusCommand.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/ToDoList/commands/UpdateStatusCommand.java" />
              <option name="updatedContent" value="package com.example.ToDoList.commands;&#10;&#10;import com.example.ToDoList.model.ToDoItem;&#10;import com.example.ToDoList.model.TaskStatus;&#10;import com.example.ToDoList.service.ToDoService;&#10;import lombok.RequiredArgsConstructor;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.springframework.shell.standard.ShellComponent;&#10;import org.springframework.shell.standard.ShellMethod;&#10;import org.springframework.shell.standard.ShellOption;&#10;&#10;import java.util.Optional;&#10;&#10;@Slf4j&#10;@ShellComponent&#10;@RequiredArgsConstructor&#10;public class UpdateStatusCommand {&#10;&#10;    private final ToDoService toDoService;&#10;&#10;    @ShellMethod(key = &quot;update-status&quot;, value = &quot;Update task status&quot;)&#10;    public String updateStatus(&#10;            @ShellOption String id,&#10;            @ShellOption String newStatus) {&#10;&#10;        try {&#10;            TaskStatus status = TaskStatus.valueOf(newStatus.toUpperCase().replace(&quot; &quot;, &quot;_&quot;));&#10;            boolean updated = toDoService.updateTodoStatus(id, status);&#10;&#10;            if (updated) {&#10;                Optional&lt;ToDoItem&gt; task = toDoService.getTodoById(id);&#10;                return String.format(&quot;✅ Status updated:\n%s&quot;, task.get().toString());&#10;            } else {&#10;                return &quot;❌ No task found with that ID.&quot;;&#10;            }&#10;        } catch (IllegalArgumentException e) {&#10;            log.warn(&quot;Invalid status provided: {}&quot;, newStatus);&#10;            return &quot;❌ Invalid status. Use: TODO, IN_PROGRESS or COMPLETED&quot;;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/ToDoList/config/CommandLineConfig.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/ToDoList/config/CommandLineConfig.java" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/com/example/ToDoList/ToDoListApplicationTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/com/example/ToDoList/ToDoListApplicationTest.java" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/com/example/ToDoList/model/TaskStatusTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/com/example/ToDoList/model/TaskStatusTest.java" />
              <option name="updatedContent" value="package com.example.ToDoList.model;&#10;&#10;import org.junit.jupiter.api.Test;&#10;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;class TaskStatusTest {&#10;&#10;    @Test&#10;    void testEnumValues() {&#10;        TaskStatus[] values = TaskStatus.values();&#10;        assertEquals(3, values.length);&#10;        assertEquals(TaskStatus.TODO, values[0]);&#10;        assertEquals(TaskStatus.IN_PROGRESS, values[1]);&#10;        assertEquals(TaskStatus.COMPLETED, values[2]);&#10;    }&#10;&#10;    @Test&#10;    void testDisplayNames() {&#10;        assertEquals(&quot;To Do&quot;, TaskStatus.TODO.getDisplayName());&#10;        assertEquals(&quot;In Progress&quot;, TaskStatus.IN_PROGRESS.getDisplayName());&#10;        assertEquals(&quot;Completed&quot;, TaskStatus.COMPLETED.getDisplayName());&#10;    }&#10;&#10;    @Test&#10;    void testToString() {&#10;        assertEquals(&quot;To Do&quot;, TaskStatus.TODO.toString());&#10;        assertEquals(&quot;In Progress&quot;, TaskStatus.IN_PROGRESS.toString());&#10;        assertEquals(&quot;Completed&quot;, TaskStatus.COMPLETED.toString());&#10;    }&#10;&#10;    @Test&#10;    void testValueOf() {&#10;        assertEquals(TaskStatus.TODO, TaskStatus.valueOf(&quot;TODO&quot;));&#10;        assertEquals(TaskStatus.IN_PROGRESS, TaskStatus.valueOf(&quot;IN_PROGRESS&quot;));&#10;        assertEquals(TaskStatus.COMPLETED, TaskStatus.valueOf(&quot;COMPLETED&quot;));&#10;    }&#10;&#10;    @Test&#10;    void testValueOfInvalidThrowsException() {&#10;        assertThrows(IllegalArgumentException.class, () -&gt; TaskStatus.valueOf(&quot;INVALID&quot;));&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/com/example/ToDoList/model/ToDoItemTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/com/example/ToDoList/model/ToDoItemTest.java" />
              <option name="updatedContent" value="package com.example.ToDoList.model;&#10;&#10;import org.junit.jupiter.api.Test;&#10;import java.time.LocalDate;&#10;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;class ToDoItemTest {&#10;&#10;    @Test&#10;    void testDefaultConstructor() {&#10;        ToDoItem item = new ToDoItem();&#10;        assertNull(item.getId());&#10;        assertNull(item.getName());&#10;        assertNull(item.getStatus());&#10;        assertNull(item.getDescription());&#10;        assertNull(item.getDueDate());&#10;    }&#10;&#10;    @Test&#10;    void testAllArgsConstructor() {&#10;        Long id = 1L;&#10;        String name = &quot;Test Task&quot;;&#10;        TaskStatus status = TaskStatus.TODO;&#10;        String description = &quot;Test Description&quot;;&#10;        LocalDate dueDate = LocalDate.of(2025, 12, 31);&#10;&#10;        ToDoItem item = new ToDoItem(id, name, status, description, dueDate);&#10;&#10;        assertEquals(id, item.getId());&#10;        assertEquals(name, item.getName());&#10;        assertEquals(status, item.getStatus());&#10;        assertEquals(description, item.getDescription());&#10;        assertEquals(dueDate, item.getDueDate());&#10;    }&#10;&#10;    @Test&#10;    void testCustomConstructorWithDefaultStatus() {&#10;        Long id = 1L;&#10;        String name = &quot;Test Task&quot;;&#10;        String description = &quot;Test Description&quot;;&#10;        LocalDate dueDate = LocalDate.of(2025, 12, 31);&#10;&#10;        ToDoItem item = new ToDoItem(id, name, description, dueDate);&#10;&#10;        assertEquals(id, item.getId());&#10;        assertEquals(name, item.getName());&#10;        assertEquals(TaskStatus.TODO, item.getStatus());&#10;        assertEquals(description, item.getDescription());&#10;        assertEquals(dueDate, item.getDueDate());&#10;    }&#10;&#10;    @Test&#10;    void testSettersAndGetters() {&#10;        ToDoItem item = new ToDoItem();&#10;        Long id = 2L;&#10;        String name = &quot;Updated Task&quot;;&#10;        TaskStatus status = TaskStatus.IN_PROGRESS;&#10;        String description = &quot;Updated Description&quot;;&#10;        LocalDate dueDate = LocalDate.of(2026, 1, 15);&#10;&#10;        item.setId(id);&#10;        item.setName(name);&#10;        item.setStatus(status);&#10;        item.setDescription(description);&#10;        item.setDueDate(dueDate);&#10;&#10;        assertEquals(id, item.getId());&#10;        assertEquals(name, item.getName());&#10;        assertEquals(status, item.getStatus());&#10;        assertEquals(description, item.getDescription());&#10;        assertEquals(dueDate, item.getDueDate());&#10;    }&#10;&#10;    @Test&#10;    void testToString() {&#10;        ToDoItem item = new ToDoItem(1L, &quot;Test Task&quot;, TaskStatus.TODO, &quot;Test Description&quot;, LocalDate.of(2025, 12, 31));&#10;        String result = item.toString();&#10;        &#10;        assertTrue(result.contains(&quot;#1&quot;));&#10;        assertTrue(result.contains(&quot;Test Task&quot;));&#10;        assertTrue(result.contains(&quot;Test Description&quot;));&#10;        assertTrue(result.contains(&quot;2025-12-31&quot;));&#10;    }&#10;&#10;    @Test&#10;    void testEqualsAndHashCode() {&#10;        ToDoItem item1 = new ToDoItem(1L, &quot;Task&quot;, TaskStatus.TODO, &quot;Description&quot;, LocalDate.of(2025, 12, 31));&#10;        ToDoItem item2 = new ToDoItem(1L, &quot;Task&quot;, TaskStatus.TODO, &quot;Description&quot;, LocalDate.of(2025, 12, 31));&#10;        ToDoItem item3 = new ToDoItem(2L, &quot;Different Task&quot;, TaskStatus.COMPLETED, &quot;Different Description&quot;, LocalDate.of(2025, 12, 31));&#10;&#10;        assertEquals(item1, item2);&#10;        assertNotEquals(item1, item3);&#10;        assertEquals(item1.hashCode(), item2.hashCode());&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/com/example/ToDoList/utils/UtilsTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/com/example/ToDoList/utils/UtilsTest.java" />
              <option name="updatedContent" value="package com.example.ToDoList.utils;&#10;&#10;import com.example.ToDoList.model.TaskStatus;&#10;import org.junit.jupiter.api.Test;&#10;&#10;import static org.junit.jupiter.api.Assertions.*;&#10;&#10;class UtilsTest {&#10;&#10;    @Test&#10;    void testGetColoredStatusTodo() {&#10;        String result = Utils.getColoredStatus(TaskStatus.TODO);&#10;        assertTrue(result.contains(&quot;To Do&quot;));&#10;        assertTrue(result.contains(&quot;\u001B[31m&quot;));&#10;        assertTrue(result.contains(&quot;\u001B[0m&quot;));&#10;    }&#10;&#10;    @Test&#10;    void testGetColoredStatusInProgress() {&#10;        String result = Utils.getColoredStatus(TaskStatus.IN_PROGRESS);&#10;        assertTrue(result.contains(&quot;In Progress&quot;));&#10;        assertTrue(result.contains(&quot;\u001B[33m&quot;));&#10;        assertTrue(result.contains(&quot;\u001B[0m&quot;));&#10;    }&#10;&#10;    @Test&#10;    void testGetColoredStatusCompleted() {&#10;        String result = Utils.getColoredStatus(TaskStatus.COMPLETED);&#10;        assertTrue(result.contains(&quot;Completed&quot;));&#10;        assertTrue(result.contains(&quot;\u001B[32m&quot;));&#10;        assertTrue(result.contains(&quot;\u001B[0m&quot;));&#10;    }&#10;&#10;    @Test&#10;    void testAllStatusesHaveColors() {&#10;        for (TaskStatus status : TaskStatus.values()) {&#10;            String result = Utils.getColoredStatus(status);&#10;            assertNotNull(result);&#10;            assertFalse(result.isEmpty());&#10;            assertTrue(result.contains(status.getDisplayName()));&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>